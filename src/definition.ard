\import Algebra.Domain.Euclidean
\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Pointed
\import Arith.Nat
\import Arith.Prime
\import Data.Bool
\import Data.Fin
\import Equiv (Map, QEquiv)
\import Equiv.Univalence
\import Function
\import Function.Meta \hiding (#)
\import Logic
\import Logic.Meta
\import Meta
\import NatFind
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Set.Fin
\import Logic
\import Topology.Locale

\data Unit | unit


\class DecGroup \extends Group, DecSet {
}

\instance FinEq {n : Nat} : DecSet (Fin n)
  | decideEq => decideEq
  \where \func decideEq {n : Nat} (x y : Fin n) : Dec (x = y) \elim n, x, y
    | suc n1, 0, 0 => Dec.yes idp
    | suc n1, 0, suc y => Dec.no contradiction
    | suc n1, suc x, 0 => Dec.no contradiction
    | suc n1, suc x, suc y => \case decideEq x y \with {
      | yes e => Dec.yes (pmap fsuc e)
      | no n2 => Dec.no (\lam p => n2 (FinSet.suc-isInj x y p))
    }

\class FinGroup \extends Group, FinSet, DecSet {
  | groupOrder : Nat
  | groupOrder => finCard
  | decideEq x y => \case finEq \with {
    | inP a =>
      \let
        | q-equiv : QEquiv => =-to-Equiv {E} {Fin groupOrder} a
      \in
        \case FinEq.decideEq (q-equiv.f x) (q-equiv.f y) \with {
          | Dec.yes a1 => Dec.yes (q-equiv.isInj a1)
          | Dec.no _x => Dec.no (\lam t => _x (pmap q-equiv.f t))
        }
  }

}

\instance lcoset {G : FinGroup} (g : G) (H : FinSubGroup G) : FinSet \cowith
  | E => \Sigma (s : G) (h : H) (s = g G.* h.1)
  | finCard => H.subgroupOrder
  | finEq => inP (QEquiv-to-= lcoset-equiv-finset)
  \where {
    \instance lcoset-equiv-finset {G : FinGroup} {g : G} {H : FinSubGroup G} : QEquiv => \new QEquiv {
      | A => \Sigma (s : G) (h : H) (s = g G.* h.1)
      | B => Fin H.subgroupOrder
      | f => {?}
      | ret => {?}
      | ret_f => {?}
      | f_sec => {?}
    }
  }

\func lcosets-eq {G : FinGroup} {g h : G} {H : FinSubGroup G} {l-g : lcoset g H} {l-h : lcoset h H}
  (p-eq : l-g.1 = l-h.1) :  lcoset g H = lcoset h H => {?}

\class FinPartition {S : FinSet} {n : Nat} {
  | f : S -> Fin n

  \func count_of_image (im : Fin n) : Nat => \scase S.finEq \with {
    | inP a =>
      \let
        | q-equiv : QEquiv => =-to-Equiv {S.E} {Fin S.finCard} a
      \in {?}
    | truncP a a' i => {?}
  }
}

\func to-even (p : Fin 4) : Fin 2 \elim p
  | 0 => 0
  | 1 => 1
  | 2 => 0
  | 3 => 1

\instance FinPartitionOfFour : FinPartition to-even


\func lagrange_theorem {G : FinGroup} {H : FinSubGroup G} : \Sigma (n : Nat) (G.finCard = H.subgroupOrder * n) => {?}


\func periodic_point {A : \Set} (f : A -> A) (x : A) (n : Nat) : \Prop => iterr f n x = x

-- okay
\func order_e (G : FinGroup) (e : G) (n : Nat) : \Prop =>
  \Sigma (periodic_point (G.* e) e n) (\Pi {m : Nat} (periodic_point (G.* e) e m) -> m >= n)

\func order_ee (G : Group) (e : G.E) (n : Nat) => {?}

\func order_is_periodic {G : FinGroup} {e : G.E} : periodic_point (G.* e) e (count_order G e) =>
 unfold (periodic_point, count_order) (unfold {?})

\func order-is-order (G : FinGroup) (e : G.E) : is-order G e (count_order G e) =>
  (order_is_periodic, {?})

\func decidedd {A : DecSet} {f : A -> A} {x : A} (n : Nat) : Dec (periodic_point f x n)
  => \case decideEq (iterr f n x) x \with {
    | yes e => yes e
    | no n1 => no n1
  }

\func pigeonhole_principle {G : FinGroup} {x : G} : \Sigma (n : Nat) (periodic_point (G.* x) x n) => {?}

\func minimal_period {G : FinGroup}  (g : G) : Nat =>
  \case nat_find {periodic_point (G.* g) g} {decidedd {G} {G.* g} {g}} pigeonhole_principle.2 \with {
    | (n,p,_x) => n
  }

\func element_order {G : FinGroup} (g : G)
  : \Sigma (n : Nat) (periodic_point (G.* g) g n) (\Pi (m : Nat) -> periodic_point (G.* g) g m -> m >= n)
  => nat_find {periodic_point (G.* g) g} {decidedd {G} {G.* g} {g}} pigeonhole_principle.2

\func test12 : periodic_point (\lam x => not x) true 2 => idp

\func count_order (G : FinGroup) (g : G.E) : Nat => helper G.groupOrder g g 1
  \where {
      \func helper (fuel : Nat) (g : G.E) (acc-g : G.E) (ans : Nat) : Nat \elim fuel
        | 0 => ans
        | suc t => \case decToBool (G.decideEq G.ide acc-g) \with {
          | false => helper t g (acc-g G.* g) (suc ans)
          | true => ans
        }
    \func helper-gt-zero (fuel : Nat) (g acc-g : G.E) (ans : Nat) (p : ans > 0) : helper fuel g acc-g ans > 0
      \elim fuel
        | 0 => p
        | suc t => \case decToBool (G.decideEq G.ide acc-g) \as b \return
            (\case b \with {
              | false => helper t g (acc-g G.* g) (suc ans)
              | true => ans
            }) > 0 \with {
          | false => helper-gt-zero t g (acc-g G.* g) (suc ans) NatSemiring.zero<suc
          | true => p
        }

    \func helper-is-order (fuel : Nat) (g acc-g : G.E) (ans : Nat) : G.pow g (helper fuel g acc-g ans) = G.ide => {?}
  }

\func count_order-gt-zero {G : FinGroup} {g : G.E} : count_order G g > 0 =>
  count_order.helper-gt-zero G G.groupOrder g g 1 NatSemiring.zero<suc

\func count_order-is-order (G : FinGroup) (g : G.E) : G.pow g (count_order G g) = G.ide =>
  unfold count_order (count_order.helper-is-order G G.groupOrder g g 1)

\func is-order (G : FinGroup) (g : G.E) (n : Nat) : \Prop =>
  \Sigma (G.pow g n = G.ide) (\Pi (m : Nat) (G.pow g m = G.ide) -> m >= n)



\class FinSubGroup \noclassifying (G : FinGroup) {
  | P : G -> \Prop
  | subgroupOrder : Nat
  | EqFin : (\Sigma (e : G.E) (P e)) = {\Set} Fin subgroupOrder
  | contains-ide : P ide
  | contains-comp {x y : G.E} (f : P x) (g : P y) : P (x * G.inverse y)

  \func struct : FinGroup \cowith
    | E => \Sigma (elem : G) (P elem)
    | ide => (G.ide, contains-ide)
    | * x y => (x.1 G.* y.1, contains-op x.2 y.2)
    | ide-left => ext G.ide-left
    | ide-right => ext G.ide-right
    | *-assoc => ext G.*-assoc
    | inverse x => (G.inverse x.1, contains-inv x.2)
    | inverse-left => ext G.inverse-left
    | inverse-right => ext G.inverse-right
    | finCard => subgroupOrder
    | finEq => inP EqFin

  \lemma contains-inv {x : G.E} (cont1 : P x) : P (G.inverse x) =>
    rewrite (inv G.ide-left) (contains-comp contains-ide cont1)

  \lemma contains-op {x y : G.E} (cont1 : P x) (cont2 : P y) : P (x * y) =>
    rewrite (inv (G.inverse-isInv y)) (contains-comp cont1 (contains-inv cont2))

  \use \coerce asGroup : FinGroup => FinSubGroup.struct
}

\class CyclicFinGroup \extends FinGroup {
  | is-cyclic : TruncP (\Sigma (g : FinGroup.E) (\Pi (h : FinGroup.E) -> \Sigma (n : Nat) (Group.pow g n = h)))
}

\func \infix 9 ^ (k n : Nat) : Nat \elim n
  | 0 => 1
  | suc t => k Nat.* (k ^ t)

\class PGroup \extends FinGroup {
  | p : Nat
  | order-pow : Nat
  | p-prime : isPrime p = true
  | is-p-group : FinGroup.groupOrder = p ^ order-pow
}

\class SylowPGroup \extends FinSubGroup {
  | is-p-sub : PGroup FinSubGroup.struct
  | max-p : \Pi (H' : FinSubGroup G) (is-p-sub' : PGroup H') -> is-p-sub.order-pow >= is-p-sub'.order-pow
}

\class NormalSubgroup \extends FinSubGroup {
  | is-normal {g : G} {n : FinSubGroup.struct} : P (g * n.1 * inverse g)
}

\func same-lcoset => {?}

\func QuotientGroup {G : FinGroup} (H : FinSubGroup G) => Quotient {G} same-lcoset

\func sylow_theorem {p : Nat} (G : FinGroup) (prime : isPrime p = true)
  (divisor : G.groupOrder Nat.mod p = 0) : SylowPGroup \cowith
  | G => G
  | P => \lam x => {?}
  | subgroupOrder => {?}
  | EqFin => {?}
  | contains-ide => {?}
  | contains-comp => {?}
  | is-p-sub => \new PGroup {
    | ide => {?}
    | * => {?}
    | ide-left => {?}
    | ide-right => {?}
    | *-assoc => {?}
    | inverse => {?}
    | inverse-left => {?}
    | inverse-right => {?}
    | finCard => {?}
    | finEq => {?}
    | # => {?}
    | #-irreflexive => {?}
    | #-symmetric => {?}
    | #-comparison => {?}
    | tightness => {?}
    | nonEqualApart => {?}
    | G => {?}
    | p => {?}
    | order-pow => {?}
    | p-prime => {?}
    | is-p-group => {?}
  }
  | max-p => {?}

\class HomG {G H : FinGroup} (f : G -> H) {
  | is-hom {g h : G} : f (g G.* h) = (f g) H.* (f h)

  \lemma ide-is-ide : f G.ide = H.ide => {?}
}

--

{- Need to define:

  1. p-group.
    In Lean it is defined by elements (every elements order is divisible by p).
    In the book it is defined by the group order (the group order is divisible by p).

  2. p-Sylow group is defined as the maximum p-group.

  3. Cyclic group (?). Cyclic subgroup probably?
    Cyclic group is simply a group that generated by some element. Formally: "there is
    exists an element g : G, (forall x : G, x = g^n)

  3.1 Exponent. In Lean it is simply (min n : forall g : G -> g ^ n = 1)

  4. Hom is defined as usual.

  4. Factorization. Also we need left and right cosets. They are defined like in the book. TODO: пока что пропустить(!)
    TODO: Как в лине формулируется разбиение группы на косеты и разбиение множества на орбиты по действию?

  5. Center of the group. TODO: Определить в первую очередь

  6. Normal subgroup. Each subgroup of the center is normal. TODO: посмотреть в лине фактор-группы перед этим
    TODO: посмотреть TruncS (или как-то так)
    Page 6 here: https://tqft.net/web/notes/load.php?name=students/20180219-MitchRowett-ASC-report-on-Lean

  7. Canonical map G -> G / H.

  8. Image of the map and isomorphism.

  9. Also I need an index and Lagrange Theorem.

-}

\func count {n : Nat} (f : Fin n -> Bool) : Nat \elim n
  | 0 => 0
  | suc n => \case f (suc n) \with {
    | true => suc $ count (\lam x => f (suc x))
    | false => count (\lam x => f (suc x))
  }

\class SetWithGroupAction \noclassifying (G : FinGroup) (S : FinSet) {
  | action : G.E -> S -> S
  | action-ide {e : S} : action G.ide e = e
  | action-hom {x y : G.E} {e : S} : action (x * y) e = action x (action y e)
  }

\instance OnItSelf {G : FinGroup} : SetWithGroupAction G G
  | action => G.*
  | action-ide => G.ide-left
  | action-hom => G.*-assoc