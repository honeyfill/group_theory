\import Arith.Nat
\import Data.Or
\import Logic
\import Logic.Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Set
\import Logic

\func Nat-ind-helper (E : Nat -> \Type)
                     (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k NatSemiring.< n -> E k) -> E n)
                     {n k : Nat} (A : k NatSemiring.< suc n) : E k \elim n
  | 0 => \case \elim k, A \with {
    | 0, _ => r 0 (\lam k A => contradiction)
    | suc k1, A => absurd (suct<1 A)
  }
  | suc n => \scase T-suc A \with {
    | inl p => Nat-ind-helper E r p
    | inr q => transport E (inv q) (r (suc n) (\lam k A => Nat-ind-helper E r A))
  }
  \where {
    \func T-suc {n k : Nat} (A : k NatSemiring.< suc n) : k NatSemiring.< n `Or` (k = n) \elim n
      | 0 => \case \elim k, A : k NatSemiring.< 1 \with {
        | 0, t => inr idp
        | suc k, t => absurd (suct<1 t)
      }
      | suc n => \case \elim k, A : k < suc (suc n) \with {
        | 0, NatSemiring.zero<suc => inl NatSemiring.zero<suc
        | suc k1, NatSemiring.suc<suc _x => \case T-suc _x \with {
          | inl a => inl (NatSemiring.suc<suc a)
          | inr b => inr (pmap suc b)
        }
      }
  }

\func Nat-ind (E : Nat -> \Type)
              (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k NatSemiring.< n -> E k) -> E n)
              (n : Nat) : E n => Nat-ind-helper E r id<suc

\func helper-2 {P : Nat -> \Prop} {E : \Pi (n : Nat) -> Dec (P n)} (n : Nat) : (\Pi (k : Nat) -> k NatSemiring.< n -> P k -> (\Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n)))-> P n -> (\Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n))
\elim n
  | 0 => \lam IH A0 => (0, A0, \lam _ _ => zero<=_)
  | suc n => \lam IH AO => \scase (nat_find.helper {P} {E} n) \with {
    | inl (k, A0, A1) => IH k A0 A1
    | inr b => (suc n, AO, \lam m Pm m< => \let X => b m \in X m< Pm)
  }

\func suct<1 {t : Nat} (p : suc t NatSemiring.< 1) : Empty \elim t
  | 0 => NatSemiring.<-irreflexive p
  | suc t => suct<1 (NatSemiring.<-transitive (id<suc {suc t}) p)

\func x<1-eq {x : Nat} (p : x NatSemiring.< 1) : x = 0 \elim x
  | 0 => idp
  | suc t => absurd (suct<1 p)

\func nat_find {P : Nat -> \Prop} {E : \Pi (n : Nat) -> Dec (P n)} {n : Nat} (pn : P n)
  : \Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n) =>
  \let A => Nat-ind (\lam x => P x -> (\Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n)))
      (\lam n1 => helper-2 {P} {E} n1)

  \in A n pn \where {
  \func helper {P : Nat -> \Prop} {E : \Pi (n : Nat) -> Dec (P n)} (n1 : Nat) :
    (\Sigma (k : Nat) (k NatSemiring.< suc n1) (P k)) `Or` (\Pi (k : Nat) -> (k NatSemiring.< suc n1) -> Not (P k)) \elim n1
    | 0 => \case (E 0) \with {
      | yes e => inl (0, NatSemiring.zero<suc, e)
      | no n1 => inr (\lam x x<1 => rewrite (x<1-eq x<1) n1)
    }
    | suc n1 => \let IH => helper {P} {E} n1 \in \case (E (suc n1)) \with {
      | yes e => inl (suc n1, id<suc {suc n1}, e)
      | no A0 => \case IH \with {
        | inl (k, A0, A1) => inl (k, NatSemiring.<-transitive A0 (id<suc {suc n1}), A1)
        | inr IH => inr (\lam k p em => \let k<=suc => <_suc_<= p \in \case decideEq k (suc n1) \with {
          | yes e => A0 (rewrite (inv e) em)
          | no n2 => \case LinearOrder.<=-dec k<=suc \with {
            | inl a => IH k a em
            | inr b => n2 b
          }
        })
      }
    }

  \func helper-2 {P : Nat -> \Prop} {E : \Pi (n : Nat) -> Dec (P n)} (n : Nat) : (\Pi (k : Nat) -> k NatSemiring.< n -> P k -> (\Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n)))-> P n -> (\Sigma (n : Nat) (P n) (\Pi (m : Nat) -> P m -> m >= n))
  \elim n
    | 0 => \lam IH A0 => (0, A0, \lam _ _ => zero<=_)
    | suc n => \lam IH AO => \scase (helper {P} {E} n) \with {
      | inl (k, A0, A1) => IH k A0 A1
      | inr b => (suc n, AO, \lam m Pm m< => \let X => b m \in X m< Pm)
    }
}